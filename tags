!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(OBJ_DIRS)	Makefile	/^$(OBJ_DIRS):$/;"	t
$(PROJECT).elf	Makefile	/^$(PROJECT).elf: $(OBJS)$/;"	t
$(PROJECT).velf	Makefile	/^$(PROJECT).velf: $(PROJECT).elf$/;"	t
$(PROJECT).vpk	Makefile	/^$(PROJECT).vpk: eboot.bin param.sfo$/;"	t
Add_Own_Block	src/player.cpp	/^void player::Add_Own_Block(int block_No)$/;"	f	class:player	typeref:typename:void
BLACK	src/common.h	/^#define BLACK /;"	d
CC	Makefile	/^CC := arm-vita-eabi-gcc$/;"	m
CHANCE	src/common.h	/^    CHANCE, $/;"	e	enum:__anon70586b7b0103
CMAKE_CXX_FLAGS	CMakeLists.txt	/^set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")$/;"	v
CMAKE_C_FLAGS	CMakeLists.txt	/^set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")$/;"	v
CMAKE_TOOLCHAIN_FILE	CMakeLists.txt	/^    set(CMAKE_TOOLCHAIN_FILE "$ENV{VITASDK}\/share\/vita.toolchain.cmake" CACHE PATH "toolchain /;"	v
CXX	Makefile	/^CXX := arm-vita-eabi-g++$/;"	m
Change_Dice_Num	src/main.cpp	/^void *Change_Dice_Num(void *buffer)$/;"	f	typeref:typename:void *
Change_Player	src/main.cpp	/^void Change_Player(void)$/;"	f	typeref:typename:void
Change_Player_Num	src/main.cpp	/^void *Change_Player_Num(void *player_Num)$/;"	f	typeref:typename:void *
Convert_String_To_Block_Type	src/block.cpp	/^block_Type block::Convert_String_To_Block_Type(std::string map_Info_Vector)$/;"	f	class:block	typeref:typename:block_Type
Create_Map	src/main.cpp	/^void Create_Map(void)$/;"	f	typeref:typename:void
Create_Player	src/main.cpp	/^void Create_Player(int player_Num)$/;"	f	typeref:typename:void
DESTINY	src/common.h	/^    DESTINY, $/;"	e	enum:__anon70586b7b0103
Delete_Own_Block	src/player.cpp	/^void player::Delete_Own_Block(int block_No)$/;"	f	class:player	typeref:typename:void
Dice	src/main.cpp	/^void Dice(void)$/;"	f	typeref:typename:void
Event	src/main.cpp	/^void Event(void)$/;"	f	typeref:typename:void
Get_Current_Player	src/main.cpp	/^int Get_Current_Player(void)$/;"	f	typeref:typename:int
HEIGHT	src/common.h	/^    HEIGHT = 544$/;"	e	enum:psv_Resolution
HOUSE	src/common.h	/^    HOUSE$/;"	e	enum:__anon70586b7b0103
INIT_COIN	src/common.h	/^#define INIT_COIN /;"	d
Info	src/render.cpp	/^void render::Info(const char* info)$/;"	f	class:render	typeref:typename:void
Is_Anyone_Lost	src/main.cpp	/^int Is_Anyone_Lost(void)$/;"	f	typeref:typename:int
LOG_FREQUENCY	src/log.h	/^#define LOG_FREQUENCY /;"	d
LOG_LEVEL_DEBUG	src/log.h	/^#define LOG_LEVEL_DEBUG /;"	d
LOG_LEVEL_INFO	src/log.h	/^#define LOG_LEVEL_INFO /;"	d
LOG_MASK	src/log.cpp	/^static int LOG_MASK = LOG_LEVEL_INFO | LOG_LEVEL_DEBUG;$/;"	v	typeref:typename:int	file:
LOG_PATH	src/log.h	/^#define LOG_PATH /;"	d
Log_Debug	src/log.h	/^#define Log_Debug(/;"	d
Log_Info	src/log.h	/^#define Log_Info(/;"	d
Log_Open	src/log.cpp	/^void Log_Open(const char *file_Name)$/;"	f	typeref:typename:void
Log_Redirect	src/log.cpp	/^void Log_Redirect(int level, const char *format, ...)$/;"	f	typeref:typename:void
Map	src/render.cpp	/^void render::Map(void)$/;"	f	class:render	typeref:typename:void
Map_Detail	src/render.cpp	/^void render::Map_Detail(void)$/;"	f	class:render	typeref:typename:void
Move	src/main.cpp	/^void Move(void)$/;"	f	typeref:typename:void
OBJS	Makefile	/^OBJS := $(addprefix out\/, $(SRC_C:src\/%.c=%.o)) $(addprefix out\/, $(SRC_CPP:src\/%.cpp=%.o))$/;"	m
OBJ_DIRS	Makefile	/^OBJ_DIRS := $(addprefix out\/, $(dir $(SRC_C:src\/%.c=%.o))) $(addprefix out\/, $(dir $(SRC_CPP:/;"	m
Own_Block_Init	src/player.cpp	/^void player::Own_Block_Init(void)$/;"	f	class:player	typeref:typename:void
PHONY	Makefile	/^PHONY := all package clean$/;"	m
PROJECT	Makefile	/^PROJECT := vita_sample$/;"	m
PROJECT_TITLE	Makefile	/^PROJECT_TITLE := Hello World$/;"	m
PROJECT_TITLEID	Makefile	/^PROJECT_TITLEID := VSDK00006$/;"	m
SRC_C	Makefile	/^SRC_C :=$(call rwildcard, src\/, *.c)$/;"	m
SRC_CPP	Makefile	/^SRC_CPP :=$(call rwildcard, src\/, *.cpp)$/;"	m
START	src/common.h	/^    START, $/;"	e	enum:__anon70586b7b0103
Screen	src/render.cpp	/^void render::Screen(const char* info, ...)$/;"	f	class:render	typeref:typename:void
Screen_With_Confirm	src/render.cpp	/^void render::Screen_With_Confirm(int confirm_Button, const char *info, ...)$/;"	f	class:render	typeref:typename:void
Set_Current_Player	src/main.cpp	/^void Set_Current_Player(int player_No)$/;"	f	typeref:typename:void
Set_First_Move_Player	src/main.cpp	/^void Set_First_Move_Player(void)$/;"	f	typeref:typename:void
Set_Log_Level	src/log.cpp	/^void Set_Log_Level(int level)$/;"	f	typeref:typename:void
Set_Player_Num	src/main.cpp	/^void Set_Player_Num(int *player_Num)$/;"	f	typeref:typename:void
Title	src/render.cpp	/^void render::Title(void)$/;"	f	class:render	typeref:typename:void
VITA_APP_NAME	CMakeLists.txt	/^set(VITA_APP_NAME "Vita2d Test")$/;"	v
VITA_TITLEID	CMakeLists.txt	/^set(VITA_TITLEID  "VSDK00125")$/;"	v
VITA_VERSION	CMakeLists.txt	/^set(VITA_VERSION  "01.00")$/;"	v
Vita2d_Test	CMakeLists.txt	/^project(Vita2d_Test)$/;"	p
WHITE	src/common.h	/^#define WHITE /;"	d
WIDTH	src/common.h	/^    WIDTH = 960,$/;"	e	enum:psv_Resolution
__BLOCK_H__	src/block.h	/^#define __BLOCK_H__$/;"	d
__COMMON_H__	src/common.h	/^#define __COMMON_H__$/;"	d
__LOG_H__	src/log.h	/^#define __LOG_H__$/;"	d
__PLAYER_H__	src/player.h	/^#define __PLAYER_H__$/;"	d
__RENDER_H__	src/render.h	/^#define __RENDER_H__$/;"	d
__anon70586b7b0103	src/common.h	/^{$/;"	g
all	Makefile	/^all: package$/;"	t
block	src/block.cpp	/^block::block(std::vector<std::string> map_Info_Vector)$/;"	f	class:block
block	src/block.h	/^class block$/;"	c
block_Type	src/common.h	/^}block_Type;$/;"	t	typeref:enum:__anon70586b7b0103
clean	Makefile	/^clean:$/;"	t
coin	src/player.h	/^        int coin;$/;"	m	class:player	typeref:typename:int
current_Player_No	src/main.cpp	/^int current_Player_No;$/;"	v	typeref:typename:int
dice_Num	src/main.cpp	/^int dice_Num;$/;"	v	typeref:typename:int
dice_Num_Buffer	src/main.cpp	/^char dice_Num_Buffer[20];$/;"	v	typeref:typename:char[20]
draw	src/main.cpp	/^render draw; $/;"	v	typeref:typename:render
eboot.bin	Makefile	/^eboot.bin: $(PROJECT).velf$/;"	t
font	src/render.cpp	/^vita2d_font *font;$/;"	v	typeref:typename:vita2d_font *
horizontal_Line	src/render.cpp	/^vita2d_texture *horizontal_Line;$/;"	v	typeref:typename:vita2d_texture *
level	src/block.h	/^        int level;$/;"	m	class:block	typeref:typename:int
log_Handle	src/log.cpp	/^FILE *log_Handle;$/;"	v	typeref:typename:FILE *
main	src/main.cpp	/^int main(int argc, char *argv[]) $/;"	f	typeref:typename:int
map_Vector	src/main.cpp	/^vector<block> map_Vector;$/;"	v	typeref:typename:vector<block>
name	src/block.h	/^        std::string name;$/;"	m	class:block	typeref:typename:std::string
name	src/player.h	/^        string name;$/;"	m	class:player	typeref:typename:string
no	src/block.h	/^        int no;$/;"	m	class:block	typeref:typename:int
out/%.o	Makefile	/^out\/%.o : src\/%.c | $(OBJ_DIRS)$/;"	t
out/%.o	Makefile	/^out\/%.o : src\/%.cpp | $(OBJ_DIRS)$/;"	t
own_Block	src/player.h	/^        vector<int> own_Block;$/;"	m	class:player	typeref:typename:vector<int>
owner	src/block.h	/^        std::string owner;$/;"	m	class:block	typeref:typename:std::string
package	Makefile	/^package: $(PROJECT).vpk$/;"	t
pad	src/main.cpp	/^SceCtrlData pad;$/;"	v	typeref:typename:SceCtrlData
param.sfo	Makefile	/^param.sfo:$/;"	t
player	src/player.cpp	/^player::player(string name)$/;"	f	class:player
player	src/player.h	/^class player$/;"	c
player_Vector	src/main.cpp	/^vector<player> player_Vector;$/;"	v	typeref:typename:vector<player>
position	src/player.h	/^        int position;$/;"	m	class:player	typeref:typename:int
price	src/block.h	/^        std::vector<int> price;$/;"	m	class:block	typeref:typename:std::vector<int>
psv_Resolution	src/common.h	/^enum psv_Resolution$/;"	g
render	src/render.cpp	/^render::render(void)$/;"	f	class:render
render	src/render.h	/^class render$/;"	c
rent	src/block.h	/^        std::vector<int> rent;$/;"	m	class:block	typeref:typename:std::vector<int>
rwildcard	Makefile	/^rwildcard=$(foreach d,$(wildcard $1*),$(call rwildcard,$d\/,$2) $(filter $(subst *,%,$2),$d))$/;"	m
type	src/block.h	/^        block_Type type;  $/;"	m	class:block	typeref:typename:block_Type
verizontal_Line	src/render.cpp	/^vita2d_texture *verizontal_Line;$/;"	v	typeref:typename:vita2d_texture *
~render	src/render.cpp	/^render::~render(void)$/;"	f	class:render
